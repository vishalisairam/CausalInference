library(tidyverse)
theme_set(theme_minimal())
# a coin tossing function (generates Bernoulli random variates)
rbern <- function(n, prob = 0.5){
rbinom(n, size = 1, prob = prob)
}
n <- 1000 # how many samples we'll typically take
set.seed(12345)
individual <- data.frame(private_tutor = rbern(n),
read_writing = rnorm(n),
mathematics = rnorm(n))
rbern <- function(n, prob = 0.5){
rbinom(n, size = 1, prob = prob)
}
n <- 1000 # how many samples we'll typically take
set.seed(12345)
ind <- data.frame(private_tutor_e = rbern(n),
read_writing_e = rnorm(n),
mathematics_e = rnorm(n))
cor(ind)
dfork <- data.frame(private_tutor = ind$private_tutor_e)
dfork <- data.frame(reading_writing = 2 + private_tutor * 1 + ind$reading_writing_e,
mathematics = 1 + private_tutor * 2 + ind$mathematics_e)
head(dfork)
dfork <- data.frame(private_tutor = ind$private_tutor_e)
dfork <- mutate(dfork,
reading_writing = 2 + private_tutor * 1 + ind$reading_writing_e,
mathematics = 1 + private_tutor * 2 + ind$mathematics_e)
dfork
head(dfork)
ind <- data.frame(private_tutor_e = rbern(n),
reading_writing_e = rnorm(n),
mathematics_e = rnorm(n))
dfork <- data.frame(private_tutor = ind$private_tutor_e)
dfork <- mutate(dfork,
reading_writing = 2 + private_tutor * 1 + ind$reading_writing_e,
mathematics = 1 + private_tutor * 2 + ind$mathematics_e)
cor(ind)
cor(dfork)
dfork <- data.frame(reading_writing = ind$reading_writing_e)
dfork <- mutate(dfork,
private_tutor_utility = 0.5 + reading_writing * 0.5 + ind$private_tutor_e,
private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + reading_writing * (-1) + ind$mathematics_e)
lm(mathematics ~ private_tutor, data = dfork) |> summary()
lm(mathematics ~ private_tutor + read_writing, data = dfork) |> summary()
lm(mathematics ~ private_tutor + reading_writing, data = dfork) |> summary()
ggplot(dfork, aes(private_tutor, mathematics,
fill = reading_writing)) +
geom_density(alpha = 0.5, color = NULL)
ggplot(dfork, aes(private_tutor, mathematics,
fill = reading_writing)) +
geom_boxplot(alpha = 0.5, color = NULL)
ggplot(dfork, aes(as.factor(private_tutor), mathematics,
fill = reading_writing)) +
geom_boxplot(alpha = 0.5, color = NULL)
ggplot(dfork, aes(as.factor(private_tutor), mathematics,
fill = reading_writing)) +
geom_boxplot(alpha = 0.5, colour = NA)
dfork
ggplot(dfork, aes(as.factor(private_tutor), mathematics,
color = reading_writing)) +
geom_boxplot(alpha = 0.5)
ggplot(dfork, aes(as.factor(private_tutor), mathematics,
color = reading_writing)) +
geom_violinplot(alpha = 0.5)
ggplot(dfork, aes(as.factor(private_tutor), mathematics,
color = reading_writing)) +
geom_violin(alpha = 0.5)
dfork <- mutate(dfork,
mathematics_0 = 1 + 0 * 2 + reading_writing * (-1) + ind$mathematics_e,
mathematics_1 = 1 + 1 * 2 + reading_writing * (-1) + ind$mathematics_e)
head(dfork)
cor(dfork[,c(mathematics_0, mathematics_1, private_tutor)])
cor(dfork[,c("mathematics_0", "mathematics_1", "private_tutor")])
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing, 10))
summarise(group_by(dfork_strata, rw_stratum),
correl = cor(mathematics_0, mathematics_1, private_tutor))
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor))
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor, use = "complete.obs"),
cor1 = cor(mathematics_1, private_tutor, use = "complete.obs")))
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor, use = "complete.obs"),
cor1 = cor(mathematics_1, private_tutor, use = "complete.obs"))
warnings()
head(dfork)
head(dfork_strata)
summary(dfork_strata)
dfork <- data.frame(reading_writing = ind$reading_writing_e)
dfork <- mutate(dfork,
private_tutor_utility = -0.5 + reading_writing * 0.5 + ind$private_tutor_e,
private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + reading_writing * (-1) + ind$mathematics_e)
summary(dfork)
dfork <- mutate(dfork,
mathematics_0 = 1 + 0 * 2 + reading_writing * (-1) + ind$mathematics_e,
mathematics_1 = 1 + 1 * 2 + reading_writing * (-1) + ind$mathematics_e)
cor(select(dfork, mathematics_0, mathematics_1, private_tutor))
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing, 10))
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor, use = "complete.obs"),
cor1 = cor(mathematics_1, private_tutor, use = "complete.obs"))
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
theme_set(theme_minimal())
# a coin tossing function (generates Bernoulli random variates)
rbern <- function(n, prob = 0.5){
rbinom(n, size = 1, prob = prob)
}
n <- 10000 # how many samples we'll typically take
set.seed(12345)
ind <- data.frame(private_tutor_e = rnorm(n),
reading_writing_e = rnorm(n),
mathematics_e = rnorm(n))
# Chunk 3
dfork <- data.frame(reading_writing = ind$reading_writing_e)
dfork <- mutate(dfork,
private_tutor_utility = -0.5 + reading_writing * 0.5 + ind$private_tutor_e,
private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + reading_writing * (-1) + ind$mathematics_e)
# Chunk 4
dfork <- mutate(dfork,
mathematics_0 = 1 + 0 * 2 + reading_writing * (-1) + ind$mathematics_e,
mathematics_1 = 1 + 1 * 2 + reading_writing * (-1) + ind$mathematics_e)
cor(select(dfork, mathematics_0, mathematics_1, private_tutor))
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing, 10))
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor, use = "complete.obs"),
cor1 = cor(mathematics_1, private_tutor, use = "complete.obs"))
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor_util, use = "complete.obs"),
cor1 = cor(mathematics_1, private_tutor_util, use = "complete.obs"))
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor_utility, use = "complete.obs"),
cor1 = cor(mathematics_1, private_tutor_utility, use = "complete.obs"))
?cut
install.packages(ppcor)
install.packages("ppcor")
?ppcor::ppcor
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor_utility, use = "complete.obs"),
cor1 = cor(mathematics_1, private_tutor_utility, use = "complete.obs"))
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor(mathematics_0, private_tutor_utility, use = "complete.obs"),
cor1 = cor(mathematics_1, private_tutor_utility, use = "complete.obs"),
n = n())
?cor.test
cor_int <- function(x, y){
res <- cor.test(x, y)
res$conf.int
}
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor.int(mathematics_0, private_tutor_utility),
cor1 = cor(mathematics_1, private_tutor_utility, use = "complete.obs"),
n = n())
cor_int <- function(x, y){
res <- cor.test(x, y)
res$conf.int
}
summarise(group_by(dfork_strata, rw_stratum),
cor0 = cor_int(mathematics_0, private_tutor_utility),
cor1 = cor(mathematics_1, private_tutor_utility, use = "complete.obs"),
n = n())
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing, 10))
group_by(dfork_strata, rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor0test = cor.test(mathematics_0, private_tutor)$p.value,
cor1 = cor(mathematics_1, private_tutor),
n = n())
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing, breaks = seq(-3,3,by=.1)))
group_by(dfork_strata, rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor0test = cor.test(mathematics_0, private_tutor)$p.value,
cor1 = cor(mathematics_1, private_tutor),
n = n())
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing, breaks = seq(-3,3,by=.2)))
group_by(dfork_strata, rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor0test = cor.test(mathematics_0, private_tutor)$p.value,
cor1 = cor(mathematics_1, private_tutor),
n = n())
ppcor::pcor(select(dfork_strata, mathematics_0, mathematics_1, private_tutor))
?ppcor::pcor(select(dfork_strata, mathematics_0, mathematics_1, private_tutor))
ppcor::pcor(dfork_strata$private_tutor, dfork_strata$mathematics_0, dfork_strata$reading_writing))
ppcor::pcor(dfork_strata$private_tutor, dfork_strata$mathematics_0, dfork_strata$reading_writing)
ppcor::pcor(dfork_strata$private_tutor, dfork_strata$mathematics_0, dfork_strata[,'reading_writing'])
ppcor::pcor(dfork_strata$private_tutor, dfork_strata$mathematics_0, dfork_strata[,'reading_writing', drop=FALSE])
ppcor::pcor.test(dfork_strata$private_tutor, dfork_strata$mathematics_0, dfork_strata[,'reading_writing', drop=FALSE])
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing,
breaks = seq(-3,3,by=.2)))
group_by(dfork_strata, rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
n = n())
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing,
breaks = seq(-3,3,by=.3)))
group_by(dfork_strata, rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
n = n())
dfork_strata <- mutate(dfork, rw_stratum = cut(reading_writing,
breaks = seq(-3,3,by=.5)))
group_by(dfork_strata, rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
n = n())
group_by(dfork_strata, rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
n = n()) # how many observations in this stratum
lm(mathematics ~ private_tutor, dfork) |> summary()
lm(mathematics ~ private_tutor + reading_writing, dfork) |> summary()
dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3,3,by=.5))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
n = n()) # how many observations in this stratum
?summarise
dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3,3,by=.5))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
lm = coef(lm(mathematics ~ private_tutor, data = cur_data()))[[2]],
n = n()) # how many observations in this stratum
dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3,3,by=.5))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
lm = coef(lm(mathematics ~ private_tutor, data = cur_data()))[['private_tutor']],
n = n()) # how many observations in this stratum
dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3,3,by=.5))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
lm = coef(lm(mathematics ~ private_tutor, data = cur_data()))$private_tutor,
n = n()) # how many observations in this stratum
d <- data.frame(private_tutor_utility = -0.5 + ind$private_tutor_e,
private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + ind$mathematics_e)
d <- data.frame(private_tutor_utility = -0.5 + ind$private_tutor_e) |>
mutate(private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + ind$mathematics_e)
d <- mutate(d,
mathematics_0 = 1 + 0 * 2  + ind$mathematics_e,
mathematics_1 = 1 + 1 * 2  + ind$mathematics_e)
head(d)
cor(select(d, mathematics_0, mathematics_1, private_tutor))
cor(select(d, mathematics_0, mathematics_1, mathematics, private_tutor))
tibble(a = 1:10) %>% tryCatch()
errorCondition("foo") %>% tryCatch(error = \(x){print("no")})
NULL %>% tryCatch(error = \(x){print("no")})
?tryCatch
tryCatch(stop("f"), error = \(x){print("no")})
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
theme_set(theme_minimal())
# a coin tossing function (generates Bernoulli random variates)
rbern <- function(n, prob = 0.5){
rbinom(n, size = 1, prob = prob)
}
n <- 10000 # how many samples we'll typically take
set.seed(12345)
ind <- data.frame(private_tutor_e = rnorm(n),
reading_writing_e = rnorm(n),
mathematics_e = rnorm(n))
# Chunk 3
d <- data.frame(private_tutor_utility = -0.5 + ind$private_tutor_e) |>
mutate(private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + ind$mathematics_e)
# Chunk 4
d <- mutate(d,
mathematics_0 = 1 + 0 * 2  + ind$mathematics_e,
mathematics_1 = 1 + 1 * 2  + ind$mathematics_e)
# Chunk 5
cor(select(d, mathematics_0, mathematics_1, mathematics, private_tutor))
# Chunk 6
dfork <- data.frame(reading_writing = ind$reading_writing_e)
dfork <- mutate(dfork,
private_tutor_utility = -0.5 + reading_writing * 0.5 + ind$private_tutor_e,
private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + reading_writing * (-1) + ind$mathematics_e)
# Chunk 7
dfork <- mutate(dfork,     ## here: V
mathematics_0 = 1 + 0 * 2 + reading_writing * (-1) + ind$mathematics_e,
mathematics_1 = 1 + 1 * 2 + reading_writing * (-1) + ind$mathematics_e)
# Chunk 8
cor(select(dfork, mathematics_0, mathematics_1, private_tutor))
# Chunk 9
dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3, 3, by = 0.5))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
# fit a linear model and extract the coefficient on tutor
lm = coef(lm(mathematics ~ private_tutor,
data = cur_data()))[['private_tutor']],
n = n()) # how many observations in this stratum?
res_conf <- dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3, 3, by = 0.5))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
# fit a linear model and extract the coefficient on tutor
lm = coef(lm(mathematics ~ private_tutor,
data = cur_data()))[['private_tutor']],
n = n()) # how many observations in this stratum?
na.omit(res_conf)
ggplot(res_conf, aes(x = lm)) +
geom_density()
res_conf <- na.omit(res_conf) # drop the 3-infinity upper range
ggplot(res_conf, aes(x = lm)) +
geom_density()
ggplot(res_conf, aes(x = lm)) +
geom_density() +
geom_vline(xintercept = mean(res_conf$lm))
ggplot(res_conf, aes(x = lm)) +
geom_density() +
geom_vline(xintercept = median(res_conf$lm))
lm(mathematics ~ private_tutor + reading_writing, dfork) |> summary()
res_conf <- dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3, 3, by = 0.25))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
# fit a linear model and extract the coefficient on tutor
lm = coef(lm(mathematics ~ private_tutor,
data = cur_data()))[['private_tutor']],
n = n()) # how many observations in this stratum?
res_conf <- na.omit(res_conf) # drop the 3-infinity upper range
ggplot(res_conf, aes(x = lm)) +
geom_density() +
geom_vline(xintercept = median(res_conf$lm))
ggplot(res_conf, aes(x = lm)) +
geom_density() +
geom_vline(xintercept = median(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
res_conf <- dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3, 3, by = 1))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
# fit a linear model and extract the coefficient on tutor
lm = coef(lm(mathematics ~ private_tutor,
data = cur_data()))[['private_tutor']],
n = n()) # how many observations in this stratum?
res_conf <- na.omit(res_conf) # drop the 3-infinity upper range
ggplot(res_conf, aes(x = lm)) +
geom_density() +
geom_vline(xintercept = median(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
res_conf <- dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3, 3, by = .3))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
# fit a linear model and extract the coefficient on tutor
lm = coef(lm(mathematics ~ private_tutor,
data = cur_data()))[['private_tutor']],
n = n()) # how many observations in this stratum?
res_conf <- na.omit(res_conf) # drop the 3-infinity upper range
ggplot(res_conf, aes(x = lm)) +
geom_density() +
geom_vline(xintercept = median(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
ggplot(res_conf, aes(x = lm)) +
geom_density() +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
ggplot(res_conf, aes(x = lm)) +
geom_histogram() +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
ggplot(res_conf, aes(x = lm)) +
geom_histogram(colour = "F5EFE4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
ggplot(res_conf, aes(x = lm)) +
geom_histogram(colour = "#F5EFE4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
ggplot(res_conf, aes(x = lm)) +
geom_histogram(fill = "#F5EFE4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
ggplot(res_conf, aes(x = lm)) +
geom_histogram(fill = "#DDCBA4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "red")
ggplot(res_conf, aes(x = lm)) +
geom_histogram(fill = "#DDCBA4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", color = "#BA0020")
ggplot(res_conf, aes(x = lm)) +
geom_histogram(fill = "#DDCBA4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dotted", size = 2, color = "#BA0020")
ggplot(res_conf, aes(x = lm)) +
geom_histogram(fill = "#DDCBA4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dashed", size = 1, color = "#BA0020")
res_conf <- dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3, 3, by = .25))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
# fit a linear model and extract the coefficient on tutor
lm = coef(lm(mathematics ~ private_tutor,
data = cur_data()))[['private_tutor']],
n = n()) # how many observations in this stratum?
geom_vline(xintercept = mean(res_conf$lm))
ggplot(res_conf, aes(x = lm)) +
geom_histogram(fill = "#DDCBA4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dashed", size = 1, color = "#BA0020")
res_conf <- dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3, 3, by = .3))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
# fit a linear model and extract the coefficient on tutor
lm = coef(lm(mathematics ~ private_tutor,
data = cur_data()))[['private_tutor']],
n = n()) # how many observations? sparse estimates will be noisy!
res_conf <- na.omit(res_conf) # drop the 3-infinity upper range
res_conf
res_conf <- na.omit(res_conf) # drop the 3-infinity upper range
ggplot(res_conf, aes(x = lm)) +
geom_histogram(fill = "#DDCBA4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dashed", size = 1, color = "#BA0020")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(tidyverse)
theme_set(theme_minimal())
# a coin tossing function (generates Bernoulli random variates)
rbern <- function(n, prob = 0.5){
rbinom(n, size = 1, prob = prob)
}
n <- 10000 # how many samples we'll typically take
set.seed(12345)
ind <- data.frame(private_tutor_e = rnorm(n),
reading_writing_e = rnorm(n),
mathematics_e = rnorm(n))
# Chunk 3
d <- data.frame(private_tutor_utility = -0.5 + ind$private_tutor_e) |>
mutate(private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + ind$mathematics_e)
# Chunk 4
d <- mutate(d,
mathematics_0 = 1 + 0 * 2  + ind$mathematics_e,
mathematics_1 = 1 + 1 * 2  + ind$mathematics_e)
# Chunk 5
cor(select(d, mathematics_0, mathematics_1, mathematics, private_tutor))
# Chunk 6
dfork <- data.frame(reading_writing = ind$reading_writing_e)
dfork <- mutate(dfork,
private_tutor_utility = -0.5 + reading_writing * 0.5 + ind$private_tutor_e,
private_tutor = ifelse(private_tutor_utility > 0, 1, 0),
mathematics = 1 + private_tutor * 2 + reading_writing * (-1) + ind$mathematics_e)
# Chunk 7
dfork <- mutate(dfork,     ## here: V
mathematics_0 = 1 + 0 * 2 + reading_writing * (-1) + ind$mathematics_e,
mathematics_1 = 1 + 1 * 2 + reading_writing * (-1) + ind$mathematics_e)
# Chunk 8
cor(select(dfork, mathematics_0, mathematics_1, private_tutor))
# Chunk 9
res_conf <- dfork |>
mutate(rw_stratum = cut(reading_writing, breaks = seq(-3, 3, by = .3))) |>
group_by(rw_stratum) |>
summarise(cor0 = cor(mathematics_0, private_tutor),
cor1 = cor(mathematics_1, private_tutor),
cor = cor(mathematics, private_tutor),
# fit a linear model and extract the coefficient on tutor
lm = coef(lm(mathematics ~ private_tutor,
data = cur_data()))[['private_tutor']],
n = n()) # how many observations? sparse estimates will be noisy!
res_conf <- na.omit(res_conf) # drop the 3-infinity upper range
# Chunk 10
ggplot(res_conf, aes(x = lm)) +
geom_histogram(fill = "#DDCBA4") +
geom_vline(xintercept = mean(res_conf$lm)) +
geom_vline(xintercept = 2, linetype = "dashed", size = 1, color = "#BA0020")
lm(mathematics ~ private_tutor, dfork) |> summary()
lm(mathematics ~ private_tutor + reading_writing, dfork) |> summary()
?library
